# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - naftest
  paths:
    include:
    - /naftest

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'TerraformSC'
  azureLocation: 'us-west-3'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)'
  terraformVersion: 'latest'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      # Step 1: install Checkov Static Code Analysis
    # Install Checkov
      - bash: pip3 install checkov
        displayName: 'Install checkov'
        name: 'install_checkov'
    # Step 2: run Terraform init to initialize the workspace
      - task: TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          

      # Step 3: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          

       # step 4 Verify module files with Checkov
      - bash: checkov --directory $(System.DefaultWorkingDirectory)
        displayName: 'Verify modules with Checkov'
        name: 'checkov_module_check'

      # Step 5: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          

       # Step 5: run Terraform apply to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform apply'
        inputs:
          command: apply
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          